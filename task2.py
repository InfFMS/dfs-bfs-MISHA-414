# Даны N городов и M дорог между ними. Дороги двусторонние (граф неориентированный). 
# Известно, что города разделены на группы (острова), 
# между которыми дорог нет. То есть граф состоит из нескольких компонент связности (островов). 
# Необходимо ответить на следующие вопросы:
# 
# 1. Есть ли путь между двумя заданными городами (вершинами)?
# 2. Сколько всего островов (компонент связности) в графе?
# 3. Перечислить, какие города принадлежат каждому острову.
# 
# Входные данные:
# Первая строка: N (количество городов) и M (количество дорог).
# Следующие M строк: пары чисел u и v, обозначающие дорогу между городами u и v.
# Затем вводится два числа: start и end — номера городов, между которыми нужно проверить наличие пути.
# 
# Выходные данные:
# Ответ на вопрос, есть ли путь между start и end ("YES" или "NO").
# Количество островов (компонент связности) в графе.
# Список городов для каждого острова (в порядке возрастания номеров островов).

# Пример 1:
# 5 3
# 1 2
# 2 3
# 4 5
# 1 4
# 
# Ожидаемый вывод:
# 
# NO
# 2
# 1: [1, 2, 3]
# 2: [4, 5]

# Пример 2:
# 6 4
# 1 2
# 3 4
# 5 6
# 2 3
# 3 5
# 
# Ожидаемый вывод:
# 
# YES
# 1
# 1: [1, 2, 3, 4, 5, 6]

# Пример 3:
# 7 0
# 1 2
# 
# Ожидаемый вывод:
# 
# NO
# 7
# 1: [1]
# 2: [2]
# 3: [3]
# 4: [4]
# 5: [5]
# 6: [6]
# 7: [7]

town, way=map(int, input().split())
lst=[]
g={}
for i in range(1, town+1):
    g[i]=[]

for _ in range(way):
    town1, town2=map(int, input().split())
    g[town1]=g[town1]+[town2]
    g[town2]=g[town2]+[town1]
print(g)

lst=[i for i in range(1, town+1)]


def sorting(i):
    for num in g[i]:
        if num in answer:
            continue
        answer.append(num)
        sorting(num)

count=1
start, end=map(int, input().split())
bull='NO'
while lst!=[]:
    answer = [lst[0]]
    sorting(lst[0])
    print(count, '=', answer)
    if start in answer and end in answer:
        bull='YES'
    for num in answer:
        lst.remove(num)
    count+=1
print(bull)